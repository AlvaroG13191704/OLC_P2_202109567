Working with If's to C3D
*************************************************
high level
*************************************************

if (a > b ) {
  [sentencia1]
} 
else if (c > d) {
  [sentencia2]
}
else if (e > f) {
  [sentencia3]
}
else if (g > h) {
  [sentencia4]
}
else {
  [sentencia5]
}

*************************************************
low level
We have to create a list of labels to jump to them at the end
*************************************************
if a > b goto L1
goto L2 
L1:
[sentencia1]
goto L3
L2:
---------------------
if c > d goto L4
goto L5
L4:
[sentencia2]
goto L6
L5:
---------------------
if e > f goto L7
goto L8
L7:
[sentencia3]
goto L9
L8:
---------------------
if g > h goto L10
goto L11
L10:
[sentencia4]
goto L12
L11:
---------------------
[sentencia5]
---------------------
L3, L6, L9, L12:
---------------------
*************************************************


Working with While's to C3D
*************************************************
high level
*************************************************
while (a > b) {
  [sentencia1]
}

*************************************************
low level
*************************************************

L3: 
if a > b goto L1
goto L2
L1:
[sentencia1]
goto L3
L2:
---------------------
*************************************************
let numero = 2
switch numero {
case 1:
print("Uno")
case 2:
print("Dos")
case 3:
print("Tres")
default:
print("Invalid day")
}

C3D CODE

t0 = 2
stack[P] = t0
P = P + 1

t1 = stack[1]


L1 -> salida
L2 -> case2
L3 -> case3
L4 -> case4
L5 -> default

-- case1
if (t1 != 1) goto L2
[block]
goto L1

-- case2
L2:
if (t1 != 2) goto L3
[block]
goto L1

-- case3
L3:
if (t1 != 3) goto L4
[block]
goto L1

-- default
L4:
[block]
goto L1

-- salida
L1:


ecuation row - major = (i * n) + j
i = row
j = column
n = number of columns
------- Working with vectors TIPS -------------------
Guardar en el entorno, donde inicia el vector
Obtener donde termina el vector
heap[INICIO_VECTOR + LONGITUD_VECTOR + 1]

ejemplo
et var = [1,2,3,4]
C3D
heap [
  4 -> longitud
  1
  2
  3
  4
]

high level

C3D
t0 = H
heap[H] = 4
H = H + 1
heap[H] = 1
H = H + 1
heap[H] = 2
H = H + 1
heap[H] = 3
H = H + 1
heap[H] = 4
H = H + 1

stack[P] = t0

var arr2 = arr1

C3D
t0 = stack[P]
stack[P] = t0
var arr: [Int] = [1,2,3,4]
arr.removeLast

C3D
t0 = stack[P]
t1 = heap[t0]
t2 = t1 - 1

