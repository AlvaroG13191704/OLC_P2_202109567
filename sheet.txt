// ------------------------ StrToFloat ------------------------ //

/**
 * @param t0: Heap Pointer al inicio de la cadena.
 * @temp t1: Caracter actual
 * @temp t2: Parte entera
 * @temp t3: Auxiliar
 * @temp t4: Parte decimal
 * @temp t5: Multiplicador decimal
 * @return t6: Numero float
 * */

t1 = heap[t0]
t2 = 0
t3 = 0
t4 = 0
t5 = 1

ENTERO L0:
    if(t1 == -1) goto RESULTADO L1
    if(t1 == 46) goto SIGUIENTE L2
    
    VALIDACION1 L3:
        if(t1 > 47) goto VALIDACION2 L4
        goto ERROR L8
    
    VALIDACION2 L4:
        if(t1 < 58) goto CONVERTIR1 L5
        goto ERROR L8

    CONVERTIR1 L5:
        // Sumar al entero
        t2 = t2 * 10
        t3 = t1 - 48
        t2 = t2 + t3

        // Siguiente caracter
        t0 = t0 + 1
        t1 = heap[t0]

        goto ENTERO L0

SIGUIENTE L2:
    // Saltar el punto
    t0 = t0 + 1
    t1 = heap[t0]

DECIMAL L6:
    if(t1 == -1) goto RESULTADO L1
    
    VALIDACION3:
        if(t1 > 47) goto VALIDACION4 L7
        goto ERROR L8
    
    VALIDACION4 L7:
        if(t1 < 58) goto CONVERTIR2 L9
        goto ERROR L8

    CONVERTIR2 L9:
        // Sumar al decimal
        t4 = t4 * 10
        t3 = t1 - 48
        t4 = t4 + t3

        // Multiplicador decimal
        t5 = t5 * 10

        // Siguiente caracter
        t0 = t0 + 1
        t1 = heap[t0]

        goto DECIMAL L6

ERROR L8:
    t6 = NIL
    goto END L10

RESULTADO L1 :
    t6 = t4 / t5
    t6 = t2 + t6

END L10:
    return



// ------------------------ ConvertToStr ------------------------ //

/**
 * @param t0 = numero
 * */

// Parte entera
t1 = (int) t0

// Parte decimal
t2 = t0 - (float) t1

// Cadena
t3 = HP
HP = HP + 1

// Contador i
t4 = t3

ENTERO L0:
    if (t1 <= 0) goto SIGUIENTE1 L1
    t5 = (int) t1 % 10
    t6 = t5 + 48
    heap[t4] = t6

    t1 = (int) t1 / 10

    t4 = t4 + 1
    goto ENTERO L0

SIGUIENTE1 L1:
    // Inicio
    t7 = t3

    // Fin
    t8 = t4 - 1

INVERTIR L2:
    if (t7 >= t8) goto SIGUIENTE2 L3
    t9 = heap[t7]

    t10 = heap[t8]
    heap[t7] = t10

    heap[t8] = t9 ?

    t7 = t7 + 1
    t8 = t8 - 1
    goto INVERTIR L2
        
SIGUIENTE2 L3:

    if (t2 == 0) goto END L5

    heap[t4] = 46
    t4 = t4 + 1
    // Multiplicador
    t10 = 1

    // Precision
    t11 = 6

DECIMAL L4:
    if (t11 == 0) goto END L5
    t2 = t2 * 10
    t12 = (int) t2

    t13 = t12 + 48
    heap[t4] = t13
    t2 = t2 - t12

    t11 = t11 - 1
    t4 = t4 + 1

    goto DECIMAL L4

END L5:
    heap[t4] = -1
    HP = t4 + 1


void _numberToStr_(){
	t1 = (int)t0;
	t2 = t0-(float)t1;
	t3 = HP;
	HP = HP + 1;
	t4 = t3;
	L0:
	if(t1 <= 0) goto L1;
	t5 = (int)t1 % 10;
	t6 = t5 + 48;
	heap[ (int) t4 ] = t6;
	t1 = (int)t1 / 10;
	t4 = t4 + 1;
	goto L0;

	L1:
	t7 = t3;
	t8 = t4 - 1;
	L2:
	if(t7 >= t8) goto L3;
	t9 = heap[ (int) t7 ];
	t10 = heap[ (int) t8 ];
	heap[ (int) t7 ] = t10;
	heap[ (int) t8 ] = t9;
	t7 = t7 + 1;
	t8 = t8 - 1;
	goto L2;

	L3:
	if(t2 == 0) goto L5;
	heap[ (int) t4 ] = 46;
	t4 = t4 + 1;
	t10 = 1;
	t11 = 6;

	L4:
	if(t11 == 0) goto L5;
	t2 = t2 * 10 ;
	t12 = (int)t2;
	t13 = t12 + 48;
	heap[ (int) t4 ] = t13;
	t2 = t2 - (float)t12;
	t11 = t11 - 1;
	t4 = t4 + 1;
	goto L4;
    
	L5:
	heap[ (int) t4 ] = -1;
	HP = t4 + 1;
	return;
}



/------NATIVES------/
void _strToFloat_(){
	t2 = heap[ (int) t1 ];
	t3 = 0;
	t4 = 0;
	t5 = 0;
	t6 = 1;
	t7 = 0;
	L0:
	if(t2 == -1) goto L10;
	if(t2 == 46) goto L4;

	L1:
	if(t2 > 47) goto L2;
	goto L9;

	L2:
	if(t2 < 58) goto L3;
	goto L9;

	L3:
	t3 = t3 * 10;
	t4 = t2 - 48;
	t3 = t3 + t4;
	t1 = t1 + 1;
	t2 = heap[ (int) t1 ];
	goto L0;

	L4:
	t1 = t1 + 1;
	t2 = heap[ (int) t1 ];

	L5:
	if(t2 == -1) goto L10;

	L6:
	if(t2 > 47) goto L7;
	goto L9;

	L7:
	if(t2 < 58) goto L8;
	goto L9;

	L8:
	t5 = t5 * 10;
	t4 = t2 - 48;
	t5 = t5 + t4;
	t6 = t6 * 10;
	t1 = t1 + 1;
	t2 = heap[ (int) t1 ];
	goto L5;
    
	L9:
	t7 = 9999999827968;
	goto L11;
	L10:
	t7 = t5 / t6;
	t7 = t7 + t3;
	L11:
	return;
}

/------MAIN------/
void main() {
	SP = 0;
	HP = 0;

	t0 = HP;
	heap[(int)HP] = 50;
	HP = HP + 1;
	heap[(int)HP] = 46;
	HP = HP + 1;
	heap[(int)HP] = 53;
	HP = HP + 1;
	heap[(int)HP] = 53;
	HP = HP + 1;
	heap[(int)HP] = -1;
	HP = HP + 1;
	
	//Funcion _strToFloat_
	t1 = t0;
	_strToFloat_();
	t8 = t7;
	
	//Variable Declaration
	t9 = 0;
	stack[(int)t9] = t8;
	

	return;
}